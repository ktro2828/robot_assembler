(defmethod bodyset
  (:set-color
   (col &rest args)
   (send-all geo::bodies :set-color col)
   )
  (:faces-intersect-with-point-vector
   (pos v)
   (apply #'append (send-all geo::bodies :faces-intersect-with-point-vector pos v)))
  )
;;
(defun make-small-axis (&key (radius 1.6) (length 16) (base-color 0))
  (let ((a-x (make-cylinder radius length))
        (a-y (make-cylinder radius length))
        (a-z (make-cylinder radius length))
        )
    (send a-x :set-color (float-vector 1 base-color base-color))
    (send a-y :set-color (float-vector base-color 1 base-color))
    (send a-z :set-color (float-vector base-color base-color 1))
    (send a-x :rotate pi/2 :y)
    (send a-y :rotate pi/2 :-x)

    (send a-z :assoc a-x)
    (send a-z :assoc a-y)
    (instance bodyset :init (make-cascoords)
              :bodies (list a-z a-x a-y))
    ))
;;
(defun axis-box (ax len p)
  (let ((cb (make-cube 1 1 len))
        (cc (make-cascoords)))
    (send cc :translate (float-vector 0 0 (- (* 0.5 len))))
    (send cb :assoc cc)

    (send cb :transform (orient-coords-to-axis (make-coords) ax))

    (send cb :translate (v- p (send cc :worldpos)) :world)
    cb
    ))
;;
(defun make-default-fixed-point-type-geometry
    (fixp &key (base 2.5) (x-len 12) (y-len 15) (z-len 10) ((:scale scl)))
  (when scl
    (setq base  (* scl base)
          x-len (* scl x-len)
          y-len (* scl y-len)
          z-len (* scl z-len)))
  (let* ((z-axis (make-cube base base (+ base z-len)))
         (y-axis (make-cube base y-len base))
         (x-axis (make-cube x-len base base))
         (lst (list z-axis y-axis x-axis))
         ret
         )
    (send z-axis :translate (float-vector 0 0 (* 0.5 z-len)))
    (send y-axis :translate (float-vector 0 (* 0.5 (+ base y-len)) 0))
    (send x-axis :translate (float-vector (* 0.5 (+ base x-len)) 0 0))
    (send z-axis :assoc x-axis)
    (send z-axis :assoc y-axis)
    (send-all lst :put :related-fixed-point fixp)
    (prog1
        (setq ret (instance bodyset :init (make-cascoords) :bodies lst))
      (send ret :put :related-fixed-point fixp)
      (send ret :transform (send fixp :worldcoords)))
    ))
;;
;;
;;
(defun make-horn12-fixed-point-type-geometry ()
  (let ((hr (make-cylinder 9 1.5 :segments 12))
        (sh (make-cylinder 2 1.0 :segments 32))
        (aa (make-cube 2 5 10))
        )
    (send aa :translate (float-vector 0 9 0))
    (send sh :translate (float-vector 0 0 1.0))
    (setq hr (body- hr sh))
    (setq hr (body- hr aa))
    (instance bodyset :init (make-cascoords) :bodies (list hr))
    ))
(defun make-horn12-hole-fixed-point-type-geometry ()
  (let ((hr (make-cylinder 9 1.5 :segments 12))
        (sh (make-cylinder 2 1.0 :segments 32))
        ;;(aa (make-cube 5 2 10))
        (aa (make-cube 2 5 10))
        )
    ;;(send aa :translate (float-vector 6 0 0))
    (send aa :translate (float-vector 0 9 0))
    (send sh :translate (float-vector 0 0 1.0))
    (setq hr (body+ hr sh))
    (setq hr (body- hr aa))
    (send hr :rotate pi :y)
    (instance bodyset :init (make-cascoords) :bodies (list hr))
    ))
(defun make-bolt12_0-tap-fixed-point-type-geometry ()
  (let ((bs (make-cube  10 20 1))
        (mz (make-cube 3.4 15 1)))
    (send mz :translate (float-vector 0 0 0.5))
    (setq bs (body- bs mz))
    (send bs :translate (float-vector 0 0 0.5))
    (instance bodyset :init (make-cascoords) :bodies (list bs))
    ))
(defun make-bolt12_0-hole-fixed-point-type-geometry ()
  (let ((bs (make-cube  10 20 1))
        (mz (make-cube 3.4 15 1)))
    (send mz :translate (float-vector 0 0 0.5))
    (setq bs (body+ bs mz))
    (send bs :translate (float-vector 0 0 0.5))
    (send bs :rotate pi :y)
    (instance bodyset :init (make-cascoords) :bodies (list bs))
    ))
;;
;; for debug
;;
(defun draw-coords (r)
  (let ((bds (list r)))
    (dolist (p (send r :all-parts roboasm-fixed-point))
      (when (eq roboasm-fixed-point (class p))
        (let ((ar (make-small-axis)))
          (send ar :transform (send p :worldcoords))
          (push ar bds))
        ))
    (objects bds)
    ))
(defun draw-fixed-coords (r)
  (let ((bds (list r)))
    (dolist (p (send r :all-parts roboasm-fixed-point))
      (when (eq roboasm-fixed-point (class p))
        (let ((tp-lst (p . types)))
          (dolist (tp tp-lst)
            (let ((ff (intern (string-upcase (format nil "make-~A-fixed-point-type-geometry" (string tp)))))
                  bd)
              (when t ;;(fboundp ff)
                ;;(setq bd (funcall ff))
                (setq bd (make-default-fixed-point-type-geometry))
                (send bd :newcoords (send p :worldcoords))
                (push bd bds)
                )
              ))
          ))
      )
    (objects bds)
    ))
